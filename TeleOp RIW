package SteelheadCode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.configuration.MotorConfiguration;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;

/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a PushBot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Remove a @Disabled the on the next line or two (if present) to add this opmode to the Driver Station OpMode list,
 * or add a @Disabled annotation to prevent this OpMode from being added to the Driver Station
 */
@TeleOp

public class TestOpMode extends LinearOpMode {
    private DcMotor rightMotor;
    private DcMotor leftMotor;
    private Servo leftservo;
    private Servo rightservo;


    @Override
    public void runOpMode() {
        leftMotor = hardwareMap.get(DcMotor.class, "leftMotor");
        rightMotor = hardwareMap.get(DcMotor.class, "rightMotor");
        leftservo = hardwareMap.get(Servo.class, "leftservo");
        rightservo = hardwareMap.get(Servo.class, "rightservo");

        telemetry.addData("Status", "Initialized");
        telemetry.update();
        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // initialize motors and servos
        leftMotor.setDirection(DcMotor.Direction.REVERSE);
        rightservo.setPosition(0);
        leftservo.setPosition(1);
        

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {
            
            // set motor power
            leftMotor.setPower(gamepad1.left_stick_y);
            rightMotor.setPower(gamepad1.right_stick_y);
            
            //servo squeeze
            if (gamepad1.right_bumper) {
                rightservo.setPosition(1);
                leftservo.setPosition(0);
            }
            else {
                rightservo.setPosition(0);
                leftservo.setPosition(1);
            }
                
                
            
            telemetry.addData("right_bumper", gamepad1.right_bumper);
            telemetry.addData("rightMotor", rightMotor.getPower());
            telemetry.addData("leftMotor", leftMotor.getPower());
            telemetry.update();
            

        }
    }
}
